syntax = "proto3";

option go_package = "api/dmsg/enterprise";

package enterprise;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "common/state.proto";
import "common/common.proto";
import "common/condition.proto";

message Product {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "Product create/update data payload"
            description: "The Create/Update payload of the Product."
            required: ["name", "address", "contact", "email"]
        }
        example: "{\"name\": \"dummy\", \"discountId\": \"XXXXXXX\"}"
    };
    string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Name of the Product."}];
    string id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique identifier for the Product."}];
    string enterpriseId = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique identifier for the Enterprise in which product belongs to."}];
    ProductType type = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Type of the Product."}];
    ProductCategory category = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Category of the Product."}];
    string description = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Description for the Product."}];
    string discountId = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Discount ID of the Product."}];
    common.State state = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "State of the Product."}];
    map<string, bytes> assets = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Assets holds the map of key and bytes, key is the unique identifier of the SKU and byte data is the pictore of an SKU "}];
    common.Origin  origin = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Usser origin details like ccreated time, upadted time, create user and updated user."}]; // This field is read-only.
    map<string, string> tags = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Tags stores the key value pairs of the enterprise."}];
    int32 version  = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Version stores the DB version of the product."}];
}

message ProductDetail {
  Product product = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Product meta data like id, name"}];
  repeated SKU skus = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of available SKUs(Sellable Unit) of the Product."}];

} 

// TODO: add atype of product
enum ProductType {
    PRODUCT_TYPE_UNSPECIFIED = 0;
    PRODUCT_TYPE_DAIRY = 1;
}

enum ProductCategory {
    PRODUCT_CATEGORY_UNSPECIFIED = 0;
    PRODUCT_CATEGORY_DAIRY = 1;
    PRODUCT_CATEGORY_VEGETABLES = 2;
    PRODUCT_CATEGORY_FRUITS = 3;
    PRODUCT_CATEGORY_BRANDED_FOOD = 4;
}

message SKU {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "SKU is the sellable unit of the product"
            description: "SKU carries various details like ."
        }
        example: "{\"name\": \"milk 500 ml\"}"
    };
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique Identifier for the SKU of a product"}];
    string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Name for the SKU of a product"}];
    string enterpriseId = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique identifier for the Enterprise in which sku belongs to."}];
    string productId = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique Identifier for the Product in which SKU is associated with."}];
    string description = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Description for the SKU of a product"}];
    float basePrice = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Base price  for the SKU of a product"}];
    bool canSubscribe = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Can Subscribe tells whether the SKU can be subscribed for the SKU"}];
    string unit = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unit of an SKU of a product"}];;
    string discountId = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Applicable Discount Id for the given SKU "}];
    map<string, bytes> assets = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Assets holds the map of key and bytes, key is the unique identifier of the SKU and byte data is the pictore of an SKU "}];
    common.Origin  origin = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Usser origin details like ccreated time, upadted time, create user and updated user."}]; // This field is read-only.
    map<string, string> tags = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Tags stores the key value pairs of the enterprise."}];
    int32 version  = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Version stores the DB version of the product."}];
}

message ProductSKUId {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "ProductSKUId is the identenfier place holder for product and SKU"
            description: "ProductSKUId is the identenfier place holder for product and SKU"
        }
        example: "{\"id\": \"{skuId}\", \"productId\": \"{productId}\"}"
    };
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique Identifier for the SKU of a product"}];
    string productId = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique Identifier for the Prodducct in which SKU is associated with."}];
}

message ProductSKU {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "ProductSKU is the identenfier place holder for product and SKU"
            description: "ProductSKU is the identenfier place holder for product and SKU"
        }
        example: "{\"productId\": \"{productId}\", \"sku\": \"{sku}\"}"
    };
    string productId = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique Identifier for the Prodducct in which SKU is associated with."}];
    SKU sku = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "SKU(Sellable Unit) of the Product."}];
}

message ProductResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "Product create/update response details"
            description: "Product create/update response details."
        }
        example: "{\"status\": \"Product Test created Successfully.\"}"
    };
  string status = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Status message of the operation."}];
}

message ProductById {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "Product request by Id"
            description: "Product request by Id details."
        }
    };
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique Identifier of the Product"}];
}

message ProductByName {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "Product request by Name"
            description: "Product request by Name details."
        }
    };
  string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique name of the Product within the given enterprise"}];
}

message ProductsListResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "Product list response details"
            description: "Product list response details."
        }
    };
  repeated Product products = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of products."}];
  common.Cursor cursor = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Cursor helps in specifying the pagenation attributes like pageNo, offset, limit etc on the number of the records."}];
}

message ProductsListRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "ProductsListRequest payload detail"
            description: "ProductsListRequest request paylod used for listing Product."
            required: ["filters"]
        }
    };
  ProductFilter filters = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Product filter"}];
  common.Cursor cursor = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Cursor helps in specifying the pagenation attributes like pageNo, offset, limit etc on the number of the records."}];
  repeated string selectFields = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Fields to select: id, name, description"}];
}

message SKUListRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "SKUListRequest payload detail"
            description: "SKUListRequest request paylod used for listing SKu By product Id."
            required: ["productId", "filters"]
        }
    };
  string productId = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Unique Identifier of the Product"}];
  common.Cursor cursor = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Cursor helps in specifying the pagenation attributes like pageNo, offset, limit etc on the number of the records."}];
  repeated string selectFields = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Fields to select: id, name, description"}];
}

message SKUListResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "SKUListResponse list response details"
            description: "SKUListResponse list response details."
        }
    };
  repeated SKU skus = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "List of SKUs."}];
  common.Cursor cursor = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Cursor helps in specifying the pagenation attributes like pageNo, offset, limit etc on the number of the records."}];
}

message ProductFilter {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "ProductFilter payload detail"
            description: "Product request paylod"
        }
  };
  repeated common.KeyValue pattern = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "KeyValue pattern is used for storing key-value pairs, key being the name of the field and value being value to it while querying the DB."}];
  common.State state = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "State, filters based on the Product state"}];
  ProductType type = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Type, filters based on the Product type"}];
  ProductCategory category = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Category, filters based on the Product Category"}];
  repeated common.Order order = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Defines the order of the given key either by ASCENDING or DESCENDING"}];
}

service ProductService {
  // Create Product
  rpc Create (Product) returns (ProductResponse) {
    option (google.api.http) = {
      post: "/v1/products"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful response";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "404";
        value: {
          description: "Not Found";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      }
    };
  }

  // Update Product
  rpc Update (Product) returns (ProductResponse) {
    option (google.api.http) = {
      put: "/v1/products/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful response";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "404";
        value: {
          description: "Not Found";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      }
    };
  }

  // GetById Product
  rpc GetById (ProductById) returns (ProductDetail) {
    option (google.api.http) = {
      get: "/v1/products/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful response";
          schema: {
            json_schema: { ref: ".enterprise.ProductDetail" }
          }
        }
      },
      responses: {
        key: "404";
        value: {
          description: "Not Found";
          schema: {
            json_schema: { ref: ".enterprise.ProductDetail" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.ProductDetail" }
          }
        }
      }
    };
  }

  // Delete Product
  rpc Delete (ProductById) returns (ProductResponse) {
    option (google.api.http) = {
        delete: "/v1/products/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful deleted the Product resource";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "404";
        value: {
          description: "Product Not Found";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Invalid data, Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      }
    };
  }

  // List all Products
  rpc List (ProductsListRequest) returns (ProductsListResponse) {
    option (google.api.http) = {
        get: "/v1/products"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful response of product list";
          schema: {
            json_schema: { ref: ".enterprise.ProductsListResponse" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.ProductsListResponse" }
          }
        }
      }
    };
  }

  // Create Product SKU
  rpc CreateSKU (ProductSKU) returns (ProductResponse) {
    option (google.api.http) = {
      post: "/v1/products/{productId}/skus"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful response";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "404";
        value: {
          description: "Not Found";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      }
    };
  }

  // Update Product SKU
  rpc UpdateSKU (ProductSKU) returns (ProductResponse) {
    option (google.api.http) = {
      put: "/v1/products/{productId}/skus/{sku.id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful response";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "404";
        value: {
          description: "Not Found";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      }
    };
  }

  // Get SKU ById Product
  rpc GetSKUById (ProductSKUId) returns (SKU) {
    option (google.api.http) = {
      get: "/v1/products/{productId}/skus/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful response";
          schema: {
            json_schema: { ref: ".enterprise.SKU" }
          }
        }
      },
      responses: {
        key: "404";
        value: {
          description: "Not Found";
          schema: {
            json_schema: { ref: ".enterprise.SKU" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.SKU" }
          }
        }
      }
    };
  }

  // Delete SKU Product
  rpc DeleteSKU (ProductSKUId) returns (ProductResponse) {
    option (google.api.http) = {
        delete: "/v1/products/{productId}/skus/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Successful deleted the SKU resource";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "404";
        value: {
          description: "Product Not Found";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      },
      responses: {
        key: "400";
        value: {
          description: "Invalid data, Bad Request";
          schema: {
            json_schema: { ref: ".enterprise.ProductResponse" }
          }
        }
      }
    };
  }
}